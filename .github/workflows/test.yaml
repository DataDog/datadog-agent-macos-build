name: MacOS Agent tests

# Workflow inputs default values are set here instead of using the `defaults` keyword
# so that the `pull_request` event can access them. 
#
# Leaving an input empty will use the default value
env:
  DEFAULT_DATADOG_AGENT_REF: 'main'
  DEFAULT_PYTHON_RUNTIMES: '3'

on:
  pull_request:
  workflow_dispatch:
    inputs:
      datadog_agent_ref:
        description: 'git ref to target on datadog-agent'
        required: false
      python_runtimes:
        description: 'Included python runtimes in the build'
        required: false

jobs:
  macos_test:
    runs-on: macos-10.15
    defaults:
      run:
        shell: bash
    steps:
    - name: Checkout with submodules
      uses: actions/checkout@v3

    - name: Use XCode 11.7
      run: |
        sudo xcode-select -s /Applications/Xcode_11.7.app

    - name: Remove preinstalled brew packages
      run: |
        # The base box ships a few things that can have unwanted effects on the MacOS build.
        # For instance, we compile Python in the pipeline. If Python finds some libraries while
        # it's being compiled, then it will add a dynamic link to them and add some features.
        # In this particular case, Python sees that there is libintl.8.dylib (provided by the gettext brew package)
        # in the default include path, thus links to it. However, that's not something we need, so we don't actually
        # ship that library in the MacOS package. Since we have a feature to make a build fail if we depend on
        # something we don't ship, this made the build fail (see: https://github.com/DataDog/datadog-agent-macos-build/runs/1011733463?check_suite_focus=true).

        # In order to avoid such cases in the future where we use things we didn't expect to, we'd rather
        # start with a "clean" runner with the bare minimum, and only install the brew packages we require.
        brew remove --force --ignore-dependencies $(brew list --formula)

    - name: Cache brew deps
      uses: actions/cache@v3.0.2
      with:
        # Paths to cache:
        # /usr/local/Homebrew - installation folder of Homebrew
        # /usr/local/Cellar - installation folder of Homebrew formulae
        # /usr/local/Frameworks, /usr/local/bin, /usr/local/opt - contain (links to) binaries installed by Homebrew formulae
        # /usr/local/lib/python3.8 - Python3 packages installation
        path: |
          /usr/local/Homebrew
          /usr/local/Cellar
          /usr/local/Frameworks
          /usr/local/bin
          /usr/local/opt
          /usr/local/lib/python3.8
        key: macos-build-cache-${{ hashFiles('./scripts/builder_setup.sh') }}

    - name: Set up builder
      run: |
        bash ./scripts/builder_setup.sh

    - name: Run tests
      env:
        VERSION: ${{ github.event.inputs.datadog_agent_ref || env.DEFAULT_DATADOG_AGENT_REF }}
        PYTHON_RUNTIMES: ${{ github.event.inputs.python_runtimes || env.DEFAULT_PYTHON_RUNTIMES }}
      run: |
        export GOMODCACHE=~/gomodcache
        mkdir -p $GOMODCACHE
        bash ./scripts/test_script.sh
